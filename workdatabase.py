from supabase import create_client, Client

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
url = "https://wqtpemsaxmanzxmdwhhp.supabase.co"
key = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndxdHBlbXNheG1hbnp4bWR3aGhwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg0NTM2OTIsImV4cCI6MjA2NDAyOTY5Mn0.2pPOuHHX2XN0jXQtCTkoJsJ08qjZVJmDafEImZZvZ-k"
supabase: Client = create_client(url, key)

def add_training_data():

    routes_data = [
        {
            "description": "–ú–∞—Ä—à—Ä—É—Ç 1",
            "user_ip": "192.168.1.100",
            "start_lat": 55.75,
            "start_lon": 37.61,
            "end_lat": 55.76,
            "end_lon": 37.62
        },
        {
            "description": "–ú–∞—Ä—à—Ä—É—Ç 2",
            "user_ip": "192.168.1.101",
            "start_lat": 55.77,
            "start_lon": 37.63,
            "end_lat": 55.78,
            "end_lon": 37.64
        },
        {
            "description": "–ú–∞—Ä—à—Ä—É—Ç 3",
            "user_ip": "192.168.1.102",
            "start_lat": 55.79,
            "start_lon": 37.65,
            "end_lat": 55.80,
            "end_lon": 37.66
        }
    ]
    try:
        response = supabase.table("routes").insert(routes_data).execute()
        inserted_routes = response.data
        print("‚úÖ –ú–∞—Ä—à—Ä—É—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    except Exception as e:
        msg = str(e)
        if "duplicate key" in msg or "violates unique constraint" in msg:
            print("‚ö†Ô∏è –ú–∞—Ä—à—Ä—É—Ç—ã —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
            return
        else:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤:", msg)
            return

    complaints_data = [
        {"user_ip": "192.168.1.100", "route_id": inserted_routes[0]["id_route"], "message": "–¢–µ—Å—Ç–æ–≤–∞—è –∂–∞–ª–æ–±–∞ 1"},
        {"user_ip": "192.168.1.101", "route_id": inserted_routes[0]["id_route"], "message": "–¢–µ—Å—Ç–æ–≤–∞—è –∂–∞–ª–æ–±–∞ 2"},
        {"user_ip": "192.168.1.102", "route_id": inserted_routes[1]["id_route"], "message": "–¢–µ—Å—Ç–æ–≤–∞—è –∂–∞–ª–æ–±–∞ 3"},
        {"user_ip": "192.168.1.103", "route_id": inserted_routes[1]["id_route"], "message": "–¢–µ—Å—Ç–æ–≤–∞—è –∂–∞–ª–æ–±–∞ 4"},
        {"user_ip": "192.168.1.104", "route_id": inserted_routes[2]["id_route"], "message": "–¢–µ—Å—Ç–æ–≤–∞—è –∂–∞–ª–æ–±–∞ 5"},
    ]
    try:
        supabase.table("complaints").insert(complaints_data).execute()
        print("‚úÖ –ñ–∞–ª–æ–±—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    except Exception as e:
        msg = str(e)
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∂–∞–ª–æ–±:", msg)

    blacklist_data = [
        {"user_ip": "192.168.100.1"},
        {"user_ip": "192.168.100.2"},
        {"user_ip": "192.168.100.3"},
        {"user_ip": "192.168.100.4"},
        {"user_ip": "192.168.100.5"},
    ]
    try:
        supabase.table("blacklist").insert(blacklist_data).execute()
        print("‚úÖ IP-–∞–¥—Ä–µ—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫")
    except Exception as e:
        msg = str(e)
        if "violates unique constraint" in msg:
            print("‚ö†Ô∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å IP-–∞–¥—Ä–µ—Å–∞–º–∏ –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        else:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ IP:", msg)

def delete_training_data():
    for i in range(1, 6):
        supabase.table("complaints").delete().eq("message", f"–¢–µ—Å—Ç–æ–≤–∞—è –∂–∞–ª–æ–±–∞ {i}").execute()

    for i in range(1, 6):
        supabase.table("blacklist").delete().eq("user_ip", f"192.168.100.{i}").execute()

    for i in range(1, 4):
        supabase.table("routes").delete().eq("description", f"–ú–∞—Ä—à—Ä—É—Ç {i}").execute()

    print("üóë –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã")

def delete_all_data():
    tables = {
        "complaints": "id_complaint",
        "blacklist": "user_ip",
        "route_points": "id_point",
        "routes": "id_route"
    }

    for table, column in tables.items():
        try:
            supabase.table(table).delete().gte(column, 0).execute()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã {table}: {e}")

    print("üóë –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü —É–¥–∞–ª–µ–Ω—ã")

def read_complaints():
    while True:
        result = supabase.table("complaints").select("*").order("id_complaint").limit(1).execute()
        complaints = result.data

        if not complaints:
            print("ü§∑ –ñ–∞–ª–æ–± –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            break

        complaint = complaints[0]
        user_ip = complaint["user_ip"]
        route_id = complaint["route_id"]
        message = complaint["message"]

        print(f"\nIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_ip}\nID –º–∞—Ä—à—Ä—É—Ç–∞: {route_id}\n–°–æ–æ–±—â–µ–Ω–∏–µ: {message}")

        print("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å")
        print("1. –£–¥–∞–ª–∏—Ç—å –∂–∞–ª–æ–±—É. –ü—Ä–æ—á–µ—Å—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∂–∞–ª–æ–±—É")
        print("2. –£–¥–∞–ª–∏—Ç—å –∂–∞–ª–æ–±—É –∏ –≤—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        print("3. –ü—Ä–æ—á–µ—Å—Ç—å –≤—Å–µ –∂–∞–ª–æ–±—ã –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("4. –í—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

        sub_choice = input("‚Üí –í–∞—à –≤—ã–±–æ—Ä: ")

        if sub_choice == "1":
            supabase.table("complaints").delete().eq("id_complaint", complaint["id_complaint"]).execute()
            print("‚úÖ –ñ–∞–ª–æ–±–∞ —É–¥–∞–ª–µ–Ω–∞")
        elif sub_choice == "2":
            supabase.table("complaints").delete().eq("id_complaint", complaint["id_complaint"]).execute()
            print("‚úÖ –ñ–∞–ª–æ–±–∞ —É–¥–∞–ª–µ–Ω–∞")
            break
        elif sub_choice == "3":
            user_complaints = supabase.table("complaints").select("*").eq("user_ip", user_ip).execute().data
            print(f"\n–ñ–∞–ª–æ–±—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å IP-–∞–¥—Ä–µ—Å–æ–º {user_ip}:")
            for c in user_complaints:
                print(f"üí¨ {c['message']}")

            print("\n1. –£–¥–∞–ª–∏—Ç—å –∂–∞–ª–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ—á–µ—Å—Ç—å –∂–∞–ª–æ–±—ã —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            print("2. –£–¥–∞–ª–∏—Ç—å –∂–∞–ª–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            print("3. –£–¥–∞–ª–∏—Ç—å –∂–∞–ª–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–±–∞–Ω–∏—Ç—å –µ–≥–æ. –ü—Ä–æ—á–µ—Å—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∂–∞–ª–æ–±—É")
            print("4. –£–¥–∞–ª–∏—Ç—å –∂–∞–ª–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–±–∞–Ω–∏—Ç—å –µ–≥–æ. –í—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            print("5. –í—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            sub2_choice = input("‚Üí –í–∞—à –≤—ã–±–æ—Ä: ")

            if sub2_choice in ["1", "2", "3", "4"]:
                supabase.table("complaints").delete().eq("user_ip", user_ip).execute()
                if sub2_choice in ["3", "4"]:
                    supabase.table("blacklist").insert({"user_ip": user_ip}).execute()
                    print("‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω")
                print("üóë –ñ–∞–ª–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª–µ–Ω—ã")
                if sub2_choice in ["2", "4"]:
                    break
            elif sub2_choice == "5":
                break  # <-- –í–´–•–û–î –í –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ

            print("\n1. –£–¥–∞–ª–∏—Ç—å –∂–∞–ª–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ—á–µ—Å—Ç—å –∂–∞–ª–æ–±—ã —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            print("2. –£–¥–∞–ª–∏—Ç—å –∂–∞–ª–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            print("3. –£–¥–∞–ª–∏—Ç—å –∂–∞–ª–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–±–∞–Ω–∏—Ç—å –µ–≥–æ. –ü—Ä–æ—á–µ—Å—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∂–∞–ª–æ–±—É")
            print("4. –£–¥–∞–ª–∏—Ç—å –∂–∞–ª–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–±–∞–Ω–∏—Ç—å –µ–≥–æ. –í—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            print("5. –í—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            sub2_choice = input("‚Üí –í–∞—à –≤—ã–±–æ—Ä: ")

            if sub2_choice in ["1", "2", "3", "4"]:
                supabase.table("complaints").delete().eq("user_ip", user_ip).execute()
                if sub2_choice in ["3", "4"]:
                    supabase.table("blacklist").insert({"user_ip": user_ip}).execute()
                    print("‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω")
                print("üóë –ñ–∞–ª–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª–µ–Ω—ã")
                if sub2_choice in ["2", "4"]:
                    break
        elif sub_choice == "4":
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

def add_ip_to_blacklist():
    ip = input("–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–±–∞–Ω–∏—Ç—å: ")
    try:
        supabase.table("blacklist").insert({"user_ip": ip}).execute()
        print(f"‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å IP-–∞–¥—Ä–µ—Å–æ–º {ip} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫")
    except Exception as e:
        msg = str(e)
        if "violates unique constraint" in msg:
            print("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ")
        else:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏:", msg)


def remove_ip_from_blacklist():
    ip = input("–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞: ")
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è IP –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ
        result = supabase.table("blacklist").select("user_ip").eq("user_ip", ip).execute()
        if not result.data:
            print(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å IP {ip} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ")
            return

        # –£–¥–∞–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω
        supabase.table("blacklist").delete().eq("user_ip", ip).execute()
        print(f"üïäÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å IP {ip} —É–¥–∞–ª—ë–Ω –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞")
    except Exception as e:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:", str(e))

def remove_route_by_id():
    try:
        route_id = int(input("–í–≤–µ–¥–∏—Ç–µ ID –º–∞—Ä—à—Ä—É—Ç–∞: "))
    except ValueError:
        print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. ID –º–∞—Ä—à—Ä—É—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
        result = supabase.table("routes").select("id_route").eq("id_route", route_id).execute()
        if not result.data:
            print(f"‚ö†Ô∏è –ú–∞—Ä—à—Ä—É—Ç —Å ID {route_id} –Ω–µ –Ω–∞–π–¥—ë–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return

        # –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
        supabase.table("routes").delete().eq("id_route", route_id).execute()
        print(f"üóë –ú–∞—Ä—à—Ä—É—Ç —Å ID {route_id} —É–¥–∞–ª—ë–Ω")
    except Exception as e:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞:", str(e))


# –ú–µ–Ω—é
print("\nüëë –î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê üëë")
while True:
    print("\n–ö–ê–ö–ò–ï –î–ï–ô–°–¢–í–ò–Ø –í–´ –•–û–¢–ò–¢–ï –°–û–í–ï–†–®–ò–¢–¨? –í–í–ï–î–ò–¢–ï –ù–û–ú–ï–†")
    print("1. –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    print("2. –£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    print("3. –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å —Ç–∞–±–ª–∏—Ü")
    print("4. –ü—Ä–æ—á–µ—Å—Ç—å –∂–∞–ª–æ–±—ã")
    print("5. –£–¥–∞–ª–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç")
    print("6. –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫")
    print("7. –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞")
    print("8. –í—ã–π—Ç–∏ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é")

    choice = input("‚Üí –í–∞—à –≤—ã–±–æ—Ä: ")

    if choice == "1":
        add_training_data()
    elif choice == "2":
        delete_training_data()
    elif choice == "3":
        delete_all_data()
    elif choice == "4":
        read_complaints()
    elif choice == "5":
        remove_route_by_id()
    elif choice == "6":
        add_ip_to_blacklist()
    elif choice == "7":
        remove_ip_from_blacklist()
    elif choice == "8":
        print("\nüîö –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
        break
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")